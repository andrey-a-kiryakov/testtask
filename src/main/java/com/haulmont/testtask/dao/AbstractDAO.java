package com.haulmont.testtask.dao;

import com.haulmont.testtask.model.AbstractElement;
import com.vaadin.server.Page;
import com.vaadin.ui.Notification;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

/*
 * Абстрактный класс-обертка для DAO-классов
 * @author Andrey Kiryakov
 */
public abstract class AbstractDAO {
    
    public abstract List getAll();
    public abstract AbstractElement getElementById(long elementId);
    public abstract boolean update(AbstractElement element);
    public abstract boolean delete(long id);
    public abstract boolean create(AbstractElement element);
    
    public static void createProjectsTables() {
        try {
            AbstractConnection connection = new HSQLDBConnection();
            if (connection.connect()) {
                try (Statement statement = connection.getConnection().createStatement()){
                    String sql = "CREATE MEMORY TABLE clients (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "sourname VARCHAR(32), name VARCHAR(32), middlename VARCHAR(32), tel VARCHAR(18))";  
                    statement.executeUpdate(sql);
                    
                    sql = "CREATE MEMORY TABLE orders (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "client_id BIGINT, description VARCHAR(1024), start_date DATE, end_date DATE, price FLOAT, "
                                + "type INTEGER, FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE RESTRICT)";
                    statement.executeUpdate(sql);
                    
                    sql = "INSERT INTO clients (sourname, name, middlename, tel) VALUES ('Иванов', 'Иван', 'Иваныч', '1234567')";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO clients (sourname, name, middlename, tel) VALUES ('Петров', 'Петр', 'Петрович', '5555555')";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO clients (sourname, name, middlename, tel) VALUES ('Сидоров', 'Сидор', 'Сидорович', '8989890')";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO orders (client_id, description, start_date, end_date, price, type) VALUES (0, 'Покраска заднего бампера', '2017-02-27', '2017-02-27', 3500, 0)";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO orders (client_id, description, start_date, end_date, price, type) VALUES (1, 'Замена масла', '2017-01-03', '2017-01-04', 1200, 1)";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO orders (client_id, description, start_date, end_date, price, type) VALUES (1, 'Заправка кондиционера', '2017-01-03', '2017-01-04', 1200, 2)";
                    statement.executeUpdate(sql);
                    sql = "INSERT INTO orders (client_id, description, start_date, end_date, price, type) VALUES (2, 'Мойка', '2016-08-13', '2016-08-13', 300, 2)";
                    statement.executeUpdate(sql);
                    
                    statement.close();
                } finally {
                    connection.closeConnection();
                } 
             }
        } catch (SQLException e) {
            new Notification("WARNING", e.getMessage(), Notification.TYPE_ERROR_MESSAGE, true).show(Page.getCurrent());
        } 
    }
}